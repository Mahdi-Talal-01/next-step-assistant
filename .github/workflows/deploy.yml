name: Push and Run Backend

on:
  push:
    branches:
      - staging

jobs:

  Build-Backend-And-Push-Dockerhub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_KEY }}

      - name: Build Docker image
        run: docker build -f ./backend/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/nextstep-backend:latest ./backend

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/nextstep-backend:latest

  Deploy-to-EC2:
    needs: Build-Backend-And-Push-Dockerhub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy docker-compose to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "backend/docker-compose.yaml"
          target: "/home/${{ secrets.EC2_USER }}/"

      - name: Create .env file on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" > .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Add user to docker group if not already added
            sudo usermod -aG docker $USER
            
            # Start Docker service if not running
            sudo systemctl start docker || true
            
            # Ensure docker-compose is installed
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Create app directory if it doesn't exist
            mkdir -p ~/app
            cd ~/app
            
            # Copy docker-compose and .env to app directory
            cp ~/docker-compose.yaml .
            cp ~/.env .
            
            # Pull latest image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/nextstep-backend:latest
            
            # Stop and remove existing containers
            sudo docker-compose down || true
            
            # Remove old images
            sudo docker image prune -f
            
            # Start new containers
            sudo docker-compose up -d
            
            # Verify deployment
            sudo docker-compose ps