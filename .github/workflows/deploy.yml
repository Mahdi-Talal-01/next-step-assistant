name: Push and Run Backend

on:
  push:
    branches:
      - staging

jobs:

  Build-Backend-And-Push-Dockerhub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_KEY }}

      - name: Build Docker image
        working-directory: ./backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nextstep-backend:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/nextstep-backend:latest

  Deploy-to-EC2:
    needs: Build-Backend-And-Push-Dockerhub
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Debug: Print current user and groups
            echo "Current user: $USER"
            echo "Current groups:"
            groups
            
            # Debug: Print Docker and Docker Compose versions
            echo "Docker version:"
            docker --version
            echo "Docker Compose version:"
            docker-compose --version
            
            # Create and setup app directory
            echo "Setting up app directory..."
            rm -rf ~/app
            mkdir -p ~/app
            cd ~/app
            
            # Create docker-compose.yaml
            echo "Creating docker-compose.yaml..."
            cat > docker-compose.yaml << 'EOL'
            version: '3.8'
            services:
              backend:
                image: ${{ secrets.DOCKER_USERNAME }}/nextstep-backend:latest
                ports:
                  - "3000:3000"
                volumes:
                  - ./backend:/app
                environment:
                  - NODE_ENV=production
                  - MYSQL_HOST=db
                  - MYSQL_DATABASE=nextstep
                depends_on:
                  - db
                restart: always
              db:
                image: mysql:8.0
                environment:
                  - MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
                  - MYSQL_DATABASE=nextstep
                  - MYSQL_USER=${{ secrets.MYSQL_USER }}
                  - MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
                volumes:
                  - mysql_data:/var/lib/mysql
                ports:
                  - "3306:3306"
                restart: always
            volumes:
              mysql_data:
            EOL
            
            # Create backend directory and .env file
            echo "Creating backend directory and .env file..."
            mkdir -p ~/app/backend
            cat > ~/app/backend/.env << EOL
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            EOL
            
            # Debug: List files and show contents
            echo "Listing files in ~/app:"
            ls -la
            echo "Listing files in ~/app/backend:"
            ls -la ~/app/backend
            echo "Contents of docker-compose.yaml:"
            cat docker-compose.yaml
            
            # Pull latest image
            echo "Pulling latest image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/nextstep-backend:latest
            
            # Stop existing containers
            echo "Stopping existing containers..."
            docker-compose down || true
            
            # Remove old images
            echo "Cleaning up old images..."
            docker image prune -f
            
            # Start new containers
            echo "Starting new containers..."
            docker-compose up -d
            
            # Verify deployment
            echo "Verifying deployment..."
            docker-compose ps